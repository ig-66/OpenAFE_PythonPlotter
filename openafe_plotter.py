# Adjust the parameters below according to your needs:
# 
# NOTE: Keep in mind that some voltammetry waves may not be 
# generated by the AFE, those will return an error.
# 
# Comment or de-comment the voltammetry type as needed.

# COM port:
COM_PORT = "COM6" # The COM port to which the Arduino is connected

# Parameters:
voltammetryType = "CV" # Cyclic Voltammetry
# voltammetryType = "DPV" # Differential Pulse Voltammetry (NOT YET IMPLEMENTED)
# voltammetryType = "SW" # Square Wave (NOT YET IMPLEMENTED)
startingPotential_millivolts = -500
endingPotential_millivolts = 500
scanRate_millivoltsPerSecond = 250
stepSize_millivolts = 2
numberOfCycles = 1
settlingTime_milliseconds = 0 # (NOT YET IMPLETMENTED)

# Graph Options:
graphTitle = "H2O + NaCl Cyclic Voltammetry" # the graph title to be displayed, can be left in blank
graphSubTitle = "" # the graph sub title, can be left blank
gridVisible = True # Change to True or False, to make the grid visible or hidden, respectively


import matplotlib.pyplot as plt
from collections import deque
from openafe import OpenAFE

def plotPoints(queVoltage, queCurrent):
	"""
	The function "plotPoints" plots points on a graph and sets the y-axis range.
	
	:param queVoltage: The queVoltage parameter represents the list of voltage values that you want to
	plot on the x-axis. Each value in the list corresponds to a point on the plot
	:param queCurrent: The queCurrent parameter represents the list of current values that you want to
	plot on the y-axis. Each value in the list corresponds to a specific point on the plot
	"""
	plt.clf()
	plt.suptitle(graphTitle)
	plt.title(graphSubTitle)
	plt.xlabel('Voltage (mV)')
	plt.ylabel('Current (uA)')
	plt.grid(visible=gridVisible)

	# PLOTTING THE POINTS
	plt.plot(queVoltage, queCurrent)

	# SET Y AXIS RANGE
	plt.xlim(startingPotential_millivolts - 100, endingPotential_millivolts + 100)

	# DRAW, PAUSE AND CLEAR
	plt.draw()
	plt.pause(0.05)


# ***** ***** ***** MAIN ***** ***** *****:

# MAX NO. OF POINTS TO STORE
queVoltage = deque(maxlen = 2000)
queCurrent = deque(maxlen = 2000)

openAFE_device = OpenAFE(COM_PORT)

while True:
	messageReceived = openAFE_device.getMessageFromOpenAFE()

	if messageReceived == -1:
		print("*** ERROR: Message corrupted!")
		break

	elif messageReceived == "MSG,RDY":
		openAFE_device.makeCyclicVoltammetry(endingPotential_millivolts,startingPotential_millivolts, \
			scanRate_millivoltsPerSecond, stepSize_millivolts, numberOfCycles, settlingTime_milliseconds)

		messageReceived = openAFE_device.getMessageFromOpenAFE() 
		if messageReceived[:-4] == "ERR":
			print("*** ERROR: MCU declined command")
			break
		
		while True:
			messageReceived = openAFE_device.getMessageFromOpenAFE()
			point = messageReceived[4:] 
			# print(messageReceived[4:]) # De-comment to print the voltammetry points
			
			if messageReceived == "MSG,END":
				plotPoints(queVoltage, queCurrent)
				print("INFO: Voltammetry finished!") 
				plt.show()
				break
			
			if messageReceived[:-4] == "ERR":
				print("*** ERROR: An error ocurred")
				break

			elif messageReceived != -1: # if message is valid
				pointObjs = point.split(',')

				voltage = float(pointObjs[0])
				current = float(pointObjs[1])

				queVoltage.append(voltage)
				queCurrent.append(current)

				if len(queVoltage) % 20 == 0: 
					plotPoints(queVoltage, queCurrent)
		break