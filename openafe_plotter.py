# Adjust the parameters below according to your needs:
# 
# NOTE: Keep in mind that some voltammetry waves may not be 
# generated by the AFE, those will return an error.
# 
# Comment or de-comment the voltammetry type as needed.

# COM port:
COM_PORT = "COM6" # The COM port to which the Arduino is connected

# Parameters:
# voltammetryType = "CV" # Cyclic Voltammetry
# voltammetryType = "DPV" # Differential Pulse Voltammetry
voltammetryType = "SW" # Square Wave

startingPotential_millivolts = -500
endingPotential_millivolts = 500
scanRate_millivoltsPerSecond = 200
stepSize_millivolts = 2
numberOfCycles = 3
settlingTime_milliseconds = 1000

pulsePotential_millivolts = 100
pulseWidth_milliseconds = 2
baseWidth_milliseconds = 20
samplePeriodPulse_milliseconds = 1
samplePeriodBase_milliseconds = 2

pulseFrequency_hertz = 10

currentRange_microamps = 200	

# Graph Options:
graphTitle = "H2O + NaCl Cyclic Voltammetry" # the graph title to be displayed, can be left in blank
graphSubTitle = "" # the graph sub title, can be left blank
gridVisible = True # Change to True or False, to make the grid visible or hidden, respectively


import matplotlib.pyplot as plt
from collections import deque
from openafe import OpenAFE

def plotPoints(queVoltage, queCurrent):
	"""
	The function "plotPoints" plots points on a graph and sets the y-axis range.
	
	:param queVoltage: The queVoltage parameter represents the list of voltage values that you want to
	plot on the x-axis. Each value in the list corresponds to a point on the plot
	:param queCurrent: The queCurrent parameter represents the list of current values that you want to
	plot on the y-axis. Each value in the list corresponds to a specific point on the plot
	"""
	plt.clf()
	plt.suptitle(graphTitle)
	plt.title(graphSubTitle)
	plt.xlabel('Voltage (mV)')
	plt.ylabel('Current (uA)')
	plt.grid(visible=gridVisible)

	# PLOTTING THE POINTS
	plt.plot(queVoltage, queCurrent)

	# SET Y AXIS RANGE
	plt.xlim(startingPotential_millivolts - 100, endingPotential_millivolts + 100)

	# DRAW, PAUSE AND CLEAR
	plt.draw()
	plt.pause(0.05)

# ***** ***** ***** Callbacks ***** ***** *****
def onVoltammetryPoint(voltage, current):
	"""
	The function `onVoltammetryPoint` appends voltage and current values to two queues and plots the
	points every 20 data points.
	
	:param voltage: The voltage value at a specific point in the voltammetry experiment
	:param current: The current parameter represents the current value measured during a voltammetry
	experiment
	"""
	queVoltage.append(voltage)
	queCurrent.append(current)

	if len(queVoltage) % 20 == 0: 
		plotPoints(queVoltage, queCurrent)


def onVoltammetryEnd():
	"""
	The function `onVoltammetryEnd` plots the voltage and current points and displays a message indicating
	that the voltammetry is finished.
	"""
	plotPoints(queVoltage, queCurrent)
	print("INFO: Voltammetry finished!") 
	plt.show()


# ***** ***** ***** MAIN ***** ***** *****:

# MAX NO. OF POINTS TO STORE
queVoltage = deque(maxlen = 2000)
queCurrent = deque(maxlen = 2000)

try:
	openAFE_device = OpenAFE(COM_PORT, onVoltammetryPoint, onVoltammetryEnd)

	openAFE_device.setCurrentRange(currentRange_microamps)

	if voltammetryType == "CV":
		openAFE_device.makeCyclicVoltammetry(settlingTime_milliseconds, startingPotential_millivolts, endingPotential_millivolts, \
			scanRate_millivoltsPerSecond, stepSize_millivolts, numberOfCycles)

	elif voltammetryType == "DPV":
		openAFE_device.makeDifferentialPulseVoltammetry(settlingTime_milliseconds, startingPotential_millivolts, 
							endingPotential_millivolts, pulsePotential_millivolts, stepSize_millivolts,
							pulseWidth_milliseconds, baseWidth_milliseconds, samplePeriodPulse_milliseconds, 
							samplePeriodBase_milliseconds)

	elif voltammetryType == "SW":
		openAFE_device.makeSquareWaveVoltammetry(settlingTime_milliseconds, startingPotential_millivolts, 
										   endingPotential_millivolts, scanRate_millivoltsPerSecond, 
										   pulsePotential_millivolts, pulseFrequency_hertz, samplePeriodPulse_milliseconds)

	openAFE_device.receiveVoltammetryPoints()

except Exception as exception:
	print(exception)